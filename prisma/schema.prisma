generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  chats         ChatsOnUser[]
  Message       Message[]
  currentPlan   Plan?         @relation(fields: [planId], references: [id])
  planId        String?       @db.ObjectId
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chat {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime?     @default(now())
  deleted      Boolean       @default(false)
  participants String[]
  author       ChatsOnUser[]
  Message      Message[]
}

model Message {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime? @default(now())
  author         User      @relation(fields: [authorId], references: [id])
  authorId       String    @db.ObjectId
  message        String
  tokenCount     Int       @default(0)
  deleted        Boolean   @default(false)
  chatIdRelation Chat      @relation(fields: [chatId], references: [id])
  chatId         String    @db.ObjectId
}

enum PlanType {
  FREE
  MP
  CC
  DC
  OTHER
}

model Plan {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            PlanType
  price           Int
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
  maxQuantity     Int
  currentQuantity Int
  expired         Boolean   @default(false)
  tokenCountTotal Int       @default(0)
  User User[]
}

model ChatsOnUser {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String @db.ObjectId
  user   User?  @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}
